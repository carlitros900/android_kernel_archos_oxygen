    #ifndef BUILD_LK
#include <linux/string.h>
#else
#include <string.h>
#endif
#include "lcm_drv.h"

#ifdef BUILD_LK
	#include <platform/mt_gpio.h>
	#include <platform/mt_pmic.h>
#elif defined(BUILD_UBOOT)
#else
	#include <mach/mt_gpio.h>
	#include <mach/mt_pm_ldo.h>
#include <mach/upmu_hw.h>
#include <mach/upmu_common_mt6323.h>
#endif

// ---------------------------------------------------------------------------
//  Local Constants
// ---------------------------------------------------------------------------

#define FRAME_WIDTH  (800) //(800)
#define FRAME_HEIGHT (1280) //(1280)

#define GPIO_LCD_RST_EN      GPIO90
#define GPIO_LCD_STB_EN      GPIO66
#define GPIO_LCD_LED_EN      GPIO83 //GPIO76
#define GPIO_LCD_LED_PWM_EN      (GPIO86 | 0x80000000) //GPIO116


// ---------------------------------------------------------------------------
//  Local Variables
// ---------------------------------------------------------------------------

//static LCM_UTIL_FUNCS lcm_util = {0};  //for fixed warning issue
static LCM_UTIL_FUNCS lcm_util = 
{
	.set_reset_pin = NULL,
	.udelay = NULL,
	.mdelay = NULL,
};


#define SET_RESET_PIN(v)    (lcm_util.set_reset_pin((v)))

#define UDELAY(n) (lcm_util.udelay(n))
#define MDELAY(n) (lcm_util.mdelay(n))
#define REGFLAG_DELAY             							0XFE
#define REGFLAG_END_OF_TABLE      							0xFF   // END OF REGISTERS MARKER



// ---------------------------------------------------------------------------
//  Local Functions
// ---------------------------------------------------------------------------

#define dsi_set_cmdq_V2(cmd, count, ppara, force_update)	        lcm_util.dsi_set_cmdq_V2(cmd, count, ppara, force_update)
#define dsi_set_cmdq(pdata, queue_size, force_update)		lcm_util.dsi_set_cmdq(pdata, queue_size, force_update)
#define wrtie_cmd(cmd)										lcm_util.dsi_write_cmd(cmd)
#define write_regs(addr, pdata, byte_nums)					lcm_util.dsi_write_regs(addr, pdata, byte_nums)
#define read_reg(cmd)											lcm_util.dsi_dcs_read_lcm_reg(cmd)
#define read_reg_v2(cmd, buffer, buffer_size)   				lcm_util.dsi_dcs_read_lcm_reg_v2(cmd, buffer, buffer_size)   

#define   LCM_DSI_CMD_MODE							0

#ifndef BUILD_LK
static bool fgisFirst = TRUE;
#endif
static void poweron_3300mv(bool enabled)
{
#ifdef BUILD_LK
	if (enabled) 
	{ 
	/* VGP3_PMU 3.3V */ 
	upmu_set_rg_vgp1_vosel(7); 
	upmu_set_rg_vgp1_en(1); 
	} 
	else 
	{ 
        upmu_set_vpa_vosel(0x38);
        upmu_set_vpa_vosel_on(0x0);
	} 
#else
	if (enabled) 
	{
        upmu_set_vpa_vosel(0x38);
        upmu_set_vpa_vosel_on(0x1);
	}
	else
	{
	hwPowerDown(MT6323_POWER_LDO_VGP1, "LCM");//
	}
#endif
}

//add by tubao ====>>> start
struct LCM_setting_table {
    unsigned cmd;
    unsigned char count;
    unsigned char para_list[64];
};


static struct LCM_setting_table lcm_initialization_setting[] = {

	/*
	Note :

	Data ID will depends on the following rule.

		count of parameters > 1	=> Data ID = 0x39
		count of parameters = 1	=> Data ID = 0x15
		count of parameters = 0	=> Data ID = 0x05

	Structure Format :

	{DCS command, count of parameters, {parameter list}}
	{REGFLAG_DELAY, milliseconds of time, {}},

	...

	Setting ending by predefined flag

	{REGFLAG_END_OF_TABLE, 0x00, {}}
	*/


{0xB0,1,{0x00}},
{0xB1,1,{0x21}},
{0xB2,1,{0x4b}},
{0xB3,1,{0x68}},
{0xB7,1,{0x73}},
{0xBA,1,{0xAB}},
{0xBB,1,{0xE8}},
{0xBE,1,{0x3F}},
{0xBD,1,{0xFF}},
{0xC3,1,{0x70}},
{0xC4,1,{0x19}},
{0xC5,1,{0xB9}},
{0xC6,1,{0x19}},                 
{0xC7,1,{0x17}},                  
{0xCA,1,{0x00}},                  
{0xCB,1,{0x3F}},                  
{0xCC,1,{0x30}},                                  
{0xCD,1,{0x27}},                                  
{0xCE,1,{0x27}},                                  
{0xCF,1,{0x16}},                                  
{0xD0,1,{0x0E}},                                  
{0xD1,1,{0x0E}},                                  
{0xD2,1,{0x13}},                                  
{0xD3,1,{0x14}},                                  
{0xD4,1,{0x14}},                                  
{0xD5,1,{0x0A}},                                  
{0xD6,1,{0x3F}}, 
//page 2
                                 
{0xD7,1,{0x30}},                                  
{0xDB,1,{0x27}},                                  
{0xD9,1,{0x27}},                                  
{0xDA,1,{0x16}},                                  
{0xDB,1,{0x0E}},                                  
{0xDC,1,{0x0E}},   
//page 3
                               
{0xDD,1,{0x13}},                                  
{0xDE,1,{0x14}},                                      
{0xDF,1,{0x14}},                                                  
{0xE0,1,{0x0A}},                                                  
{0xE5,1,{0x52}},                                                  
{0xB0,1,{0x02}},                                                  
{0xB1,1,{0x25}},                                                  
{0xB2,1,{0x00}},                                                  
{0xB3,1,{0x11}},                                                  
{0xB4,1,{0x12}},                                                  
{0xB5,1,{0x09}}, 
//page 4
                                                 
{0xB6,1,{0x0B}},                                                  
{0xB7,1,{0x05}},                                                  
{0xB8,1,{0x07}},                                                  
{0xB9,1,{0x01}},                                                  
{0xBA,1,{0x00}},                                                  
{0xBB,1,{0x00}},                                                  
{0xBC,1,{0x00}},                                                  
{0xBD,1,{0x00}},                                                  
{0xBE,1,{0x00}},                                                  
{0xBF,1,{0x00}},                                                  
{0xC0,1,{0x03}},                                                  
{0xC1,1,{0x00}},                                                  
{0xC2,1,{0x00}},                                                  
{0xC3,1,{0x00}},                                                  
{0xC4,1,{0x00}},                                                  
{0xC5,1,{0x00}},                                                  
{0xC6,1,{0x00}},                                                      
{0xC7,1,{0x25}},                                                  
{0xC8,1,{0x00}},                                                  
{0xC9,1,{0x11}},                                                      
{0xCA,1,{0x12}},                                                      
{0xCB,1,{0x0A}},                                                      
{0xCC,1,{0x0C}},                                                      
{0xCD,1,{0x06}},                                                      
{0xCE,1,{0x08}},                                                              
{0xCF,1,{0x02}},                                                      
{0xD0,1,{0x00}},                                                     
{0xD1,1,{0x00}},  
//page 5
                                                   
{0xD2,1,{0x00}},                                                     
{0xD3,1,{0x00}},                                                     
{0xD4,1,{0x00}},                                                         
{0xD5,1,{0x00}},                                                         
{0xD6,1,{0x04}},                                                     
{0xD7,1,{0x00}},                                                             
{0xD8,1,{0x00}},                                                     
{0xD9,1,{0x00}},                                                         
{0xDA,1,{0x00}},                                                             
{0xDB,1,{0x00}},                                                         
{0xDC,1,{0x00}},                                                     
{0xB0,1,{0x03}},                                                      
{0xB6,1,{0x10}},                 
{0xB7,1,{0x00}},
{0xBa,1,{0x21}},
{0xBe,1,{0x21}},
{0xc3,1,{0x03}},
{0xC4,1,{0x0a}},                                            
{0xc5,1,{0x03}}, 
{0xC6,1,{0x06}},                                                         
{0xC7,1,{0x01}},                                                              
{0xCA,1,{0x3c}},                                                          
{0xCB,1,{0x04}},                                                          
{0xCC,1,{0x05}},                                                              
{0x11,0,{0x00}},
{REGFLAG_DELAY, 200, {}},
{0x29,0,{0x00}},
{REGFLAG_DELAY, 50, {}},

	// Note
	// Strongly recommend not to set Sleep out / DisplDSI_clk_HS_modeay On here. That will cause messed frame to be shown as later the backlight is on.

	// Setting ending by predefined flag
	{REGFLAG_END_OF_TABLE, 0x00, {}}
};


static struct LCM_setting_table lcm_sleep_out_setting[] = {
    // Sleep Out
	{0x11, 0, {0x00}},
    {REGFLAG_DELAY, 120, {}},

    // Display ON
	{0x29, 0, {0x00}},
	{REGFLAG_END_OF_TABLE, 0x00, {}}
};
static void push_table(struct LCM_setting_table *table, unsigned int count, unsigned char force_update)
{
	unsigned int i;

    for(i = 0; i < count; i++) {

        unsigned cmd;
        cmd = table[i].cmd;

        switch (cmd) {

            case REGFLAG_DELAY :
                MDELAY(table[i].count);
                break;

            case REGFLAG_END_OF_TABLE :
                break;

            default:
				dsi_set_cmdq_V2(cmd, table[i].count, table[i].para_list, force_update);
       	}
    }

}



//add by tubao ====>>> end
// ---------------------------------------------------------------------------
//  LCM Driver Implementations
// ---------------------------------------------------------------------------

static void lcm_set_util_funcs(const LCM_UTIL_FUNCS *util)
{
    memcpy(&lcm_util, util, sizeof(LCM_UTIL_FUNCS));
}


static void lcm_get_params(LCM_PARAMS *params)
{

		memset(params, 0, sizeof(LCM_PARAMS));
	
		params->type   = LCM_TYPE_DSI;

		params->width  = FRAME_WIDTH;
		params->height = FRAME_HEIGHT;

#if 0
		// enable tearing-free
		params->dbi.te_mode 				= LCM_DBI_TE_MODE_DISABLED;
		params->dbi.te_edge_polarity		= LCM_POLARITY_RISING;
#endif

        #if (LCM_DSI_CMD_MODE)
		params->dsi.mode   = CMD_MODE;
        #else
		params->dsi.mode   = BURST_VDO_MODE;//SYNC_PULSE_VDO_MODE; //BURST_VDO_MODE; //SYNC_EVENT_VDO_MODE;
        #endif
	
		// DSI
		/* Command mode setting */
		//1 Three lane or Four lane
		params->dsi.LANE_NUM				= LCM_FOUR_LANE;
		//The following defined the fomat for data coming from LCD engine.
		//params->dsi.data_format.color_order = LCM_COLOR_ORDER_RGB;
		//params->dsi.data_format.trans_seq   = LCM_DSI_TRANS_SEQ_MSB_FIRST;
		//params->dsi.data_format.padding     = LCM_DSI_PADDING_ON_LSB;
		params->dsi.data_format.format      = LCM_DSI_FORMAT_RGB888;

		// Highly depends on LCD driver capability.
		// Not support in MT6573
		//params->dsi.packet_size=256;

		// Video mode setting		
		//params->dsi.intermediat_buffer_num = 0;//because DSI/DPI HW design change, this parameters should be 0 when video mode in MT658X; or memory leakage

		params->dsi.PS=LCM_PACKED_PS_24BIT_RGB888;
		//params->dsi.word_count=1920*3; //720*3;	

		
		params->dsi.vertical_sync_active				= 2;//4;//5; //4; //6; //(12-4-4); //1;
		params->dsi.vertical_backporch					= 10;//3; //6; //4; //6; //10;
		params->dsi.vertical_frontporch					= 12;//8;//6; //4//6; //10;
		params->dsi.vertical_active_line				= FRAME_HEIGHT; 

		params->dsi.horizontal_sync_active				= 24;//5; //40; //44; //(120-40-40); //1;
		params->dsi.horizontal_backporch				= 24;//132;//59;//44; //40; //44; //57;
		params->dsi.horizontal_frontporch				= 72;//24;//16;//44; //40; //44; //32;
		params->dsi.horizontal_active_pixel				= FRAME_WIDTH;

		// Bit rate calculation
		//1 Every lane speed
		//params->dsi.pll_div1=1; //0;		// div1=0,1,2,3;div1_real=1,2,4,4 ----0: 546Mbps  1:273Mbps
		//params->dsi.pll_div2=1;		// div2=0,1,2,3;div1_real=1,2,4,4	
		//params->dsi.fbk_div =22;//31;    // fref=26MHz, fvco=fref*(fbk_div+1)*2/(div1_real*div2_real)	
		//params->dsi.fbk_sel =0;
		//params->dsi.fbk_div =45;
        params->dsi.PLL_CLOCK = 225;//LCM_DSI_6589_PLL_CLOCK_NULL; //LCM_DSI_6589_PLL_CLOCK_396_5;
    
		//params->dsi.CLK_ZERO = 262; //47;
		//params->dsi.HS_ZERO = 117; //36;

       //params->dsi.cont_clock = 1;
		//params->dsi.noncont_clock = TRUE; 
		//params->dsi.noncont_clock_period = 2; // Unit : frames

}
extern void DSI_clk_HS_mode(unsigned char enter);
static void lcm_init(void)
{
	//unsigned int data_array[16];
	unsigned int data_array[16];
#ifdef BUILD_LK
	printf("[LK/LCM] lcm_init() enter\n");

	upmu_set_strup_ext_pmic_en(0x1);
    upmu_set_vpa_vosel(0x38);
    upmu_set_vpa_en(1);

	MDELAY(50);
#if 1
{
	mt_set_gpio_mode(GPIO_MSDC2_CMD, GPIO_MODE_00);
    mt_set_gpio_dir(GPIO_MSDC2_CMD,GPIO_DIR_OUT);
    mt_set_gpio_out(GPIO_MSDC2_CMD, GPIO_OUT_ZERO);
}
#endif
#elif (defined BUILD_UBOOT)
#else
    upmu_set_vpa_vosel(0x38);
    upmu_set_vpa_en(1);
    //hwPowerOn(MT6323_POWER_LDO_VGP1, VOL_3300, "LCM");
	MDELAY(50);
#endif
	mt_set_gpio_mode(GPIO_LCD_RST_EN, GPIO_MODE_00);
	mt_set_gpio_dir(GPIO_LCD_RST_EN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_LCD_RST_EN, GPIO_OUT_ONE);
	
	MDELAY(5);
	mt_set_gpio_mode(GPIO_LCD_RST_EN, GPIO_MODE_00);
	mt_set_gpio_dir(GPIO_LCD_RST_EN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_LCD_RST_EN, GPIO_OUT_ZERO);
	
	MDELAY(5);
	mt_set_gpio_mode(GPIO_LCD_RST_EN, GPIO_MODE_00);
	mt_set_gpio_dir(GPIO_LCD_RST_EN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_LCD_RST_EN, GPIO_OUT_ONE);

	MDELAY(150);

	push_table(lcm_initialization_setting, sizeof(lcm_initialization_setting) / sizeof(struct LCM_setting_table), 1);

    MDELAY(100);
    mt_set_gpio_mode(GPIO_LCD_LED_EN, GPIO_MODE_00);
	mt_set_gpio_dir(GPIO_LCD_LED_EN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_LCD_LED_EN, GPIO_OUT_ONE);
}

static   void lcm_init_power(void)
{
	mt_set_gpio_mode(GPIO_LCD_LED_EN, GPIO_MODE_00);
	mt_set_gpio_dir(GPIO_LCD_LED_EN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_LCD_LED_EN, GPIO_OUT_ONE);
	MDELAY(20);
}

static void lcm_suspend(void)
{
	#if 0
	mt_set_gpio_mode(GPIO_LCD_LED_PWM_EN, GPIO_MODE_00);
	mt_set_gpio_dir(GPIO_LCD_LED_PWM_EN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_LCD_LED_PWM_EN, GPIO_OUT_ZERO);
	#endif
	MDELAY(20);

	mt_set_gpio_mode(GPIO_LCD_LED_EN, GPIO_MODE_00);
	mt_set_gpio_dir(GPIO_LCD_LED_EN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_LCD_LED_EN, GPIO_OUT_ZERO);
	MDELAY(20);
#if (defined BUILD_UBOOT)	
#elif (defined BUILD_LK)
#else
	upmu_set_vpa_vosel(0x38);
    upmu_set_vpa_vosel_on(0x0);
#endif	
    MDELAY(20); 
}
static void lcm_resume(void)
{
	lcm_init();
}
         
#if (LCM_DSI_CMD_MODE)
static void lcm_update(unsigned int x, unsigned int y,
                       unsigned int width, unsigned int height)
{
	unsigned int x0 = x;
	unsigned int y0 = y;
	unsigned int x1 = x0 + width - 1;
	unsigned int y1 = y0 + height - 1;

	unsigned char x0_MSB = ((x0>>8)&0xFF);
	unsigned char x0_LSB = (x0&0xFF);
	unsigned char x1_MSB = ((x1>>8)&0xFF);
	unsigned char x1_LSB = (x1&0xFF);
	unsigned char y0_MSB = ((y0>>8)&0xFF);
	unsigned char y0_LSB = (y0&0xFF);
	unsigned char y1_MSB = ((y1>>8)&0xFF);
	unsigned char y1_LSB = (y1&0xFF);

	unsigned int data_array[16];

	data_array[0]= 0x00053902;
	data_array[1]= (x1_MSB<<24)|(x0_LSB<<16)|(x0_MSB<<8)|0x2a;
	data_array[2]= (x1_LSB);
	dsi_set_cmdq(data_array, 3, 1);
	
	data_array[0]= 0x00053902;
	data_array[1]= (y1_MSB<<24)|(y0_LSB<<16)|(y0_MSB<<8)|0x2b;
	data_array[2]= (y1_LSB);
	dsi_set_cmdq(data_array, 3, 1);

	data_array[0]= 0x00290508; //HW bug, so need send one HS packet
	dsi_set_cmdq(data_array, 1, 1);
	
	data_array[0]= 0x002c3909;
	dsi_set_cmdq(data_array, 1, 0);

}
#endif

LCM_DRIVER SE20811010280036_lcm_drv = 
{
    .name			= "SE20811010280036_lcm_drv",
	.set_util_funcs = lcm_set_util_funcs,
	.get_params     = lcm_get_params,
	.init           = lcm_init,
//	.init_power     = lcm_init_power,
	.suspend        = lcm_suspend,
	.resume         = lcm_resume,
#if (LCM_DSI_CMD_MODE)
    .update         = lcm_update,
#endif
    };
